# V13 OFI+CVD+AI Trading System — CLEAN system.yaml (compatible, unified)
# Schema version: 13.1-clean
# Notes:
# - Single source of truth; no duplicate blocks; explicit ports; consistent units (seconds)
# - Backward-compat keys kept where needed and marked as deprecated
# - Designed to be hot-reload friendly and diff-friendly

system:
  name: "OFI_CVD_AI_Trading_System"
  version: "v13.1-clean"
  environment: "development"   # overridable by ENV
  description: "OFI + CVD fusion trading system (clean config)"
  author: "V13 Team"
  created_at: "2025-10-19"

# ================================ Divergence Detection ================================
divergence_detection:
  enabled: true
  mode: "pivot"   # pivot | rules  (loader should read only the branch defined here)

  # --- Pivot-based configuration (authoritative when mode=pivot) ---
  pivot_detection:
    swing_L: 13
    ema_k: 5
  thresholds:
    z_hi: 1.6
    z_mid: 0.6
  denoising:
    min_separation: 6
    cooldown_secs: 30.0   # seconds
    warmup_min: 100
    max_lag: 0.3          # seconds
  fusion:
    use_fusion: true

  # --- Rules branch (kept for backward-compat; values aligned to pivot branch) ---
  version: "v1.0"
  default:
    swing_L: 13
    z_hi: 1.6
    z_mid: 0.6
    cooldown_secs: 30.0
    max_lag: 0.3
    cons_min: 0.45
    min_separation: 6
    warmup_min: 100
    weak_threshold: 35.0
  overrides: []  # intentionally empty in clean edition to avoid ambiguity

  # Monitoring & perf
  performance: { max_events_per_second: 100, batch_size: 10, queue_size: 1000 }
  monitoring:
    prometheus: { port: 8004, path: "/metrics", scrape_interval: "5s" }
    alerts:
      enabled: true
      rules:
        - name: "divergence_detection_failure"
          expr: "increase(divergence_events_total[5m]) == 0"
          for: "10m"
          severity: "warning"
          summary: "No divergence events emitted"
  calibration:
    file: "config/calibration/divergence_score_calibration.json"
    version: "v1.0"
    description: "score→expected return/winrate mapping"
  hot_reload: { enabled: true, watch_file: true, reload_delay: 1.0, backup_config: true, log_changes: true }

# ================================ Fusion Metrics (Fusion engine) ================================
fusion_metrics:
  version: "v13-fusion-rc1-20251028"
  description: "OFI+CVD fusion with advanced mechanisms (flip rearm + adaptive cooldown + burst coalesce)"

  weights: { w_ofi: 0.6, w_cvd: 0.4, gate: 0.0 }   # weights auto-normalized by code

  thresholds:
    # v13-fusion-rc1-20251028 包B基线配置
    fuse_buy: 0.95
    fuse_strong_buy: 1.70
    fuse_sell: -0.95
    fuse_strong_sell: -1.70
    regime_thresholds:
      active: { fuse_buy: 1.3, fuse_strong_buy: 2.3, fuse_sell: -1.3, fuse_strong_sell: -2.3 }
      normal: { fuse_buy: 1.5, fuse_strong_buy: 2.5, fuse_sell: -1.5, fuse_strong_sell: -2.5 }
      quiet:  { fuse_buy: 1.7, fuse_strong_buy: 2.7, fuse_sell: -1.7, fuse_strong_sell: -2.7 }

  consistency:
    # v13-fusion-rc1-20251028 包B配置
    min_consistency: 0.12
    strong_min_consistency: 0.45
    regime_consistency:
      active: { min_consistency: 0.45, strong_min_consistency: 0.75 }
      normal: { min_consistency: 0.50, strong_min_consistency: 0.80 }
      quiet:  { min_consistency: 0.55, strong_min_consistency: 0.85 }
  
  # 数据容忍配置
  data_processing:
    z_clip: 4.0
    max_lag: 0.25
    warmup_samples: 10
    
  # 预热期显式观测
  warmup:
    enabled: true
    log_warmup_end: true
    warmup_threshold: 10

  # Global denoising defaults (can be overridden per scenario via strategy_mode)
  denoising: { hysteresis_exit: 0.6, cooldown_secs: 0.30, min_consecutive: 1, min_duration: 1 }
  
  # Grapes机制（突破冷却限制）v13-fusion-rc1-20251028
  advanced_mechanisms:
    # 机制1: 方向翻转即重臂
    rearm_on_flip: true
    flip_rearm_margin: 0.05
    
    # 机制2: 自适应冷却
    adaptive_cooldown:
      enabled: true
      k: 0.6
      min_secs: 0.12
    
    # 机制3: 微型突发合并
    burst_coalesce_ms: 120.0

  performance: { max_events_per_second: 100, batch_size: 10, queue_size: 1000 }
  alerts: { consistency_threshold: 0.2, lag_threshold: 0.5 }
  hot_reload: { enabled: true, watch_file: true, reload_delay: 1.0, backup_config: true, log_changes: true }
  logging: { level: "INFO", file: "logs/fusion.log", max_size: "10MB", backup_count: 5 }

# ================================ Gating Configuration ================================
gating:
  weak_signal_threshold: 0.05     # 宽松版：从0.08→0.05
  consistency_min: 0.30           # 宽松版：从0.35→0.30
  min_hold_time_sec: 10           # 诊断期：从5→10
  reverse_cooldown_sec: 15        # 减少冷却时间，从20→15

# ================================ Components Configuration (Calibration Strategy A) ================================
components:
  cvd:
    z_window: 120
    ema_alpha: 0.30           # 诊断期配置：从0.25调整到0.30
    winsor_limit: 5.0         # 从 8 降到 5，提振尾部
    mad_multiplier: 1.10      # 从 1.30 降低，减少过分缩放
    mad_window_trades: 240    # 稍短，提升响应
    ewma_fast_hl: 60          # 加快尺度响应
    scale_fast_weight: 0.40   # 多给一些快尺度权重
    scale_slow_weight: 0.60
  
  ofi:
    z_window: 90
    ema_alpha: 0.30           # 诊断期配置：从0.25调整到0.30

# ================================ Data Source ================================
data_source:
  provider: "binance"
  default_symbol: "ETHUSDT"
  symbols: [ "ETHUSDT", "BTCUSDT" ]
  websocket:
    connection:
      timeout: 30
      reconnect_interval: 5
      max_reconnect_attempts: 0
      ping_interval: 20
      heartbeat_timeout: 60
      max_backoff_interval: 30
    stream:
      depth_levels: 5
      update_frequency: 100
      buffer_size: 1000
      backpressure_threshold: 0.8
    logging:
      level: "INFO"
      rotate_interval: 60
      max_file_size: 5000000
      backup_count: 7
      enable_ndjson: true
    monitoring:
      stats_interval: 60
      enable_metrics: true
      enable_latency_stats: true
    storage:
      data_dir: "data/order_book"
      log_dir: "logs"
      enable_compression: true
      compression_format: "gzip"

# ================================ Components ================================
components:
  cvd:
    enabled: true
    description: "Cumulative Volume Delta with robust scaling and Z-score"
    config_file: "profiles/analysis.env"
    realtime_config_file: "profiles/realtime.env"
    # Core params
    z_window: 300
    ema_alpha: 0.2
    use_tick_rule: true
    warmup_min: 5
    z_mode: "delta"
    # Robust scale (EWMA floor)
    scale_mode: "ewma"
    ewma_fast_hl: 80
    mad_window_trades: 300
    mad_scale_factor: 1.4826
    scale_fast_weight: 0.30
    scale_slow_weight: 0.70
    mad_multiplier: 1.30
    half_life_trades: 600
    winsor_limit: 8.0
    # Freezing & stale handling
    freeze_min: 25
    stale_threshold_ms: 5000
    soft_freeze_ms: 4000
    hard_freeze_ms: 5000
    post_stale_freeze: 2

  ofi:
    enabled: true
    description: "Order Flow Imbalance (5-level weighted, EMA + Z)"
    config_file: "binance_config.yaml"
    levels: 5
    weights: [0.4, 0.25, 0.2, 0.1, 0.05]
    z_window: 300
    ema_alpha: 0.2

  ai:
    enabled: false
    models_dir: "models"
    description: "ML models (Stage 3)"

  trading:
    enabled: false
    config_file: "trading.yaml"
    description: "Execution & risk (Stage 2)"

# ================================ Paths & Logging ================================
paths:
  data_dir: "data"
  logs_dir: "logs"
  reports_dir: "docs/reports"
  models_dir: "models"
  config_dir: "config"
  archive_dir: "../archive"
  temp_dir: "temp"

logging:
  level: "INFO"
  level_by_mode: { active: "INFO", quiet: "INFO" }
  format: "%(asctime)s - %(name)s - %(levelname)s - %(message)s"
  date_format: "%Y-%m-%d %H:%M:%S"
  file: { enabled: true, filename: "system.log", max_size_mb: 100, backup_count: 5 }
  console: { enabled: true, level: "INFO" }

# ================================ Monitoring ================================
monitoring:
  enabled: true
  interval_seconds: 10
  metrics:
    system: [ "cpu_usage", "memory_usage", "disk_usage" ]
    application: [ "queue_size", "processing_rate", "latency", "error_rate" ]
    business: [ "trade_count", "cvd_value", "ofi_value", "signal_count" ]
  prometheus: { port: 8003, path: "/metrics", scrape_interval: "5s" }
  divergence_metrics: { port: 8004, path: "/metrics", env: "testing" }
  fusion_metrics: { port: 8005, path: "/metrics" }

# ================================ Strategy Mode (3-regimes + 2×2 scenarios) ================================
strategy_mode:
  default_mode: "auto"   # auto | active | quiet
  hysteresis: { window_secs: 60, min_active_windows: 3, min_quiet_windows: 6 }

  triggers:
    schedule:
      enabled: true
      timezone: "Asia/Hong_Kong"
      calendar: "CRYPTO"
      enabled_weekdays: ["Mon","Tue","Wed","Thu","Fri","Sat","Sun"]
      holidays: []
      active_windows:
        - { start: "09:00", end: "16:00", timezone: "Asia/Hong_Kong" }
        - { start: "20:00", end: "02:00", timezone: "Asia/Hong_Kong" }
      wrap_midnight: true
    market:
      enabled: true
      window_secs: 60
      # Stage-1 base gate
      min_trades_per_min: 20
      min_quote_updates_per_sec: 5
      max_spread_bps: 15
      min_volatility_bps: 0.5
      min_volume_usd: 20000
      use_median: true
      winsorize_percentile: 95
      # Stage-2 quality filters
      quality_filters:
        active: { min_trades_per_min: 40, min_quote_updates_per_sec: 10, max_spread_bps: 10, min_volatility_bps: 1.0, min_volume_usd: 50000 }
        normal: { min_trades_per_min: 30, min_quote_updates_per_sec: 8,  max_spread_bps: 12, min_volatility_bps: 0.8, min_volume_usd: 30000 }
        quiet:  { min_trades_per_min: 20, min_quote_updates_per_sec: 5,  max_spread_bps: 15, min_volatility_bps: 0.5, min_volume_usd: 20000 }

  weak_signal_threshold: 0.10

  # 2×2 scenario parameters (+ per-scenario calculator knobs)
  scenario_parameters:
    A_H: { Z_HI_LONG: 1.5, Z_HI_SHORT: -1.5, Z_MID: 1.0, TP_BPS: 25, SL_BPS: 12, min_hold_time_sec: 20, consistency_min: 0.50, ofi_z_window: 180, cvd_freeze_min: 25, min_consecutive: 2 }
    A_L: { Z_HI_LONG: 1.3, Z_HI_SHORT: -1.3, Z_MID: 0.8, TP_BPS: 20, SL_BPS: 10, min_hold_time_sec: 15, consistency_min: 0.45, ofi_z_window: 200, cvd_freeze_min: 25, min_consecutive: 2 }
    Q_H: { Z_HI_LONG: 1.0, Z_HI_SHORT: -1.0, Z_MID: 0.6, TP_BPS: 15, SL_BPS: 8,  min_hold_time_sec: 10, consistency_min: 0.40, ofi_z_window: 260, cvd_freeze_min: 40, min_consecutive: 2 }
    Q_L: { Z_HI_LONG: 0.8, Z_HI_SHORT: -0.8, Z_MID: 0.5, TP_BPS: 12, SL_BPS: 6,  min_hold_time_sec: 8, consistency_min: 0.35, ofi_z_window: 300, cvd_freeze_min: 40, min_consecutive: 2 }

  features: 
    dynamic_mode_enabled: true
    dry_run: false
  
  # 场景切换配置
  hysteresis:
    window_secs: 30
    min_active_windows: 1
    min_quiet_windows: 1
  
  triggers:
    market:
      enabled: true
      window_secs: 30
      min_trades_per_min: 60            # 暂时降低
      min_quote_updates_per_sec: 10     # 暂时降低
      min_volatility_bps: 2             # 暂时降低
  monitoring:
    prometheus: { port: 8006, path: "/metrics", scrape_interval: "5s" }
    alerts:
      enabled: true
      rules:
        - { name: "strategy_mode_switching_too_frequently", expr: "sum(increase(strategy_mode_transitions_total[1h])) > 10", for: "10m", severity: "warning", summary: "Mode switches too frequently" }
        - { name: "strategy_mode_stuck_in_quiet", expr: "(time() - max(strategy_mode_last_change_timestamp)) > 4*3600 and on() avg(strategy_mode_active) < 0.5", for: "15m", severity: "warning", summary: "Stuck in quiet" }
  hot_reload: { enabled: true, watch_file: true, reload_delay: 2.0, backup_config: true, log_changes: true }

# ================================ Signal Analysis (offline eval) ================================
signal_analysis:
  version: "v2.0"
  baseline:
    labels: { type: "mid", forward_direction: true }
    calibration: { method: "platt", train_window: 7200, test_window: 1800 }
    cvd_auto_flip: true
    merge_tolerance_ms: 1500
    fusion: { w_ofi: 0.6, w_cvd: 0.4, gate: 0.0 }
  slice_overrides:
    active_period: { fusion: { w_ofi: 0.7, w_cvd: 0.3, gate: 0.0 }, description: "Active period OFI-led" }
    quiet_period:  { fusion: { w_ofi: 0.5, w_cvd: 0.5, gate: 0.0 }, description: "Quiet period equal-weight" }
  monitoring:
    prometheus:
      port: 8010
      path: "/metrics"
      scrape_interval: "5s"
      cvd_direction: true
      merge_time_diff: { p50: true, p90: true, p99: true }
      platt_calibration: { train_samples: true, test_samples: true, ece: true, brier: true }
      slice_auc: { active_period: true, quiet_period: true, tokyo_session: true, london_session: true, ny_session: true }
    alerts:
      enabled: true
      rules:
        - { name: "signal_analysis_cvd_direction_flipped", expr: "cvd_direction_flipped_total > 0", for: "1m", severity: "info", summary: "CVD flip" }
        - { name: "signal_analysis_merge_time_diff_high", expr: "merge_time_diff_ms_p99 > 2000", for: "5m", severity: "warning", summary: "Merge lag high" }
        - { name: "signal_analysis_platt_calibration_failure", expr: "platt_calibration_failures_total > 0", for: "2m", severity: "warning", summary: "Platt failed" }
        - { name: "signal_analysis_slice_auc_low", expr: "slice_auc_active_period < 0.55", for: "10m", severity: "warning", summary: "AUC low" }

# ================================ Fusion Metrics Collector ================================
fusion_metrics_collector:
  enabled: true
  history: { max_records: 1000, cleanup_interval: 300 }
  collection: { update_interval: 1.0, batch_size: 10, enable_warmup: true, warmup_samples: 50 }
  performance: { max_collection_rate: 100, memory_limit_mb: 50, gc_threshold: 0.8 }
  monitoring:
    prometheus: { port: 8011, path: "/metrics", scrape_interval: "5s" }
    alerts:
      enabled: true
      rules:
        - { name: "fusion_metrics_collection_failure", expr: "increase(fusion_metrics_collection_failures_total[5m]) > 0", for: "2m", severity: "warning", summary: "Collector failed" }
        - { name: "fusion_metrics_memory_high", expr: "fusion_metrics_memory_usage_bytes / fusion_metrics_memory_limit_bytes > 0.8", for: "5m", severity: "warning", summary: "Collector memory high" }
  hot_reload: { enabled: true, watch_file: true, reload_delay: 1.0, backup_config: true, log_changes: true }

# ================================ Trade Stream ================================
trade_stream:
  enabled: true
  queue: { size: 1024, max_size: 2048, backpressure_threshold: 0.8 }
  logging: { print_every: 100, stats_interval: 60.0, log_level: "INFO" }
  websocket: { heartbeat_timeout: 30, backoff_max: 15, ping_interval: 20, close_timeout: 10, reconnect_delay: 1.0, max_reconnect_attempts: 10 }
  performance: { watermark_ms: 500, batch_size: 10, max_processing_rate: 1000, memory_limit_mb: 100 }  # 测试期降低到500ms
  monitoring:
    prometheus: { port: 8008, path: "/metrics", scrape_interval: "5s" }
    alerts:
      enabled: true
      rules:
        - { name: "trade_stream_connection_failure", expr: "increase(trade_stream_connection_failures_total[5m]) > 0", for: "2m", severity: "warning", summary: "WS failed" }
        - { name: "trade_stream_queue_high", expr: "trade_stream_queue_size / trade_stream_queue_max_size > 0.8", for: "5m", severity: "warning", summary: "Queue high" }
  hot_reload: { enabled: true, watch_file: true, reload_delay: 1.0, backup_config: true, log_changes: true }

# ================================ Database & Testing ================================
database:
  enabled: false
  type: "sqlite"
  sqlite: { database: "data/system.db" }
  postgresql: { host: "localhost", port: 5432, database: "ofi_cvd_ai" }

testing:
  mode: "unit"
  test_data_dir: "tests/data"
  test_results_dir: "tests/results"
  coverage: true

# ================================ Data Harvest (Task 1.3.1 v2) ================================
data_harvest:
  mode: "realtime"
  symbols: ["BTCUSDT", "ETHUSDT"]
  run_hours: 72
  parquet_rotate_sec: 60
  websocket: { ping_interval: 20, heartbeat_timeout: 30, reconnect_delay: 1.0, max_reconnect_attempts: 10 }
  deduplication: { lru_size: 8192, check_agg_trade_id: true }
  data_quality:
    precheck_minutes: 10
    acceptance_criteria:
      max_empty_bucket_rate: 0.001
      max_duplicate_rate: 0.005
      max_latency_p99_ms: 120
      max_latency_p50_ms: 60
      min_events_per_72h: 1000
      min_winsor_effect: 0.1
  output:
    base_dir: "data/ofi_cvd"
    artifacts_dir: "artifacts"
    compression: "snappy"
    partition_by: ["date", "symbol", "kind"]
    schemas:
      prices:
        - { name: "ts_ms", type: "int64" }
        - { name: "event_ts_ms", type: "int64" }
        - { name: "symbol", type: "string" }
        - { name: "price", type: "float64" }
        - { name: "qty", type: "float64" }
        - { name: "agg_trade_id", type: "string" }
        - { name: "latency_ms", type: "float64" }
        - { name: "recv_rate_tps", type: "float64" }
      ofi:
        - { name: "ts_ms", type: "int64" }
        - { name: "symbol", type: "string" }
        - { name: "ofi_value", type: "float64" }
        - { name: "ofi_z", type: "float64" }
        - { name: "scale", type: "float64" }
        - { name: "regime", type: "string" }
      cvd:
        - { name: "ts_ms", type: "int64" }
        - { name: "symbol", type: "string" }
        - { name: "cvd", type: "float64" }
        - { name: "delta", type: "float64" }
        - { name: "z_raw", type: "float64" }
        - { name: "z_cvd", type: "float64" }
        - { name: "scale", type: "float64" }
        - { name: "sigma_floor", type: "float64" }
        - { name: "floor_used", type: "float64" }
        - { name: "regime", type: "string" }
      fusion:
        - { name: "ts_ms", type: "int64" }
        - { name: "symbol", type: "string" }
        - { name: "score", type: "float64" }
        - { name: "score_z", type: "float64" }
        - { name: "regime", type: "string" }
      events:
        - { name: "ts_ms", type: "int64" }
        - { name: "symbol", type: "string" }
        - { name: "event_type", type: "string" }
        - { name: "meta_json", type: "string" }
  monitoring:
    prometheus: { port: 8009, path: "/metrics", scrape_interval: "5s" }
    alerts:
      latency_high: { condition: "latency_ms_p99 > 120", duration: "10m", severity: "warning", description: "Latency high" }
      reconnect_frequent: { condition: "ws_reconnects_total > 10", duration: "1h", severity: "warning", description: "WS reconnects frequent" }
      floor_hit_high: { condition: "cvd_floor_hit_rate > 0.6", duration: "15m", severity: "warning", description: "CVD floor high" }
      empty_buckets_high: { condition: "empty_bucket_rate > 0.005", duration: "1h", severity: "critical", description: "Empty buckets high" }
  stability:
    checkpoint: { enabled: true, file: "artifacts/state/checkpoint.json", save_interval_sec: 60 }
    auto_recovery: { enabled: true, max_retries: 3, retry_delay_sec: 5 }
    error_handling: { max_errors_per_hour: 100, error_cooldown_sec: 300, skip_on_error: true }

# ================================ Feature Flags ================================
features:
  use_system_config: true
  verbose_logging: false
  profiling: false
  experimental: false
  strategy:
    dynamic_mode_enabled: true
    throttle_in_quiet: true
    sample_ratio_quiet: 0.3
    dry_run: false
    cli_override_priority: true

# ================================ Notifications ================================
notifications:
  enabled: false
  channels: [ email ]
  email: { smtp_server: "smtp.gmail.com", smtp_port: 587 }

# ================================ Security ================================
security:
  encrypt_api_keys: true
  mask_sensitive_data: true
  allowed_ips: []
  rate_limiting: { enabled: false, max_requests_per_minute: 100 }
